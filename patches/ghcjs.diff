--- old/ghcjs.cabal	2014-05-30 16:21:00.000000000 -0700
+++ new/ghcjs.cabal	2014-05-30 16:22:58.420419395 -0700
@@ -90,7 +90,7 @@
                    aeson          >= 0.7      && < 0.8,
                    text           >= 0.11     && < 1.2,
                    wl-pprint-text >= 1.1      && < 1.2,
-                   lens           >= 4.0      && < 4.1,
+                   lens           >= 4.0,
                    yaml           >= 0.8      && < 0.9,
                    time,
                    system-filepath,
@@ -106,7 +106,7 @@
                    parallel       >= 3.2      && < 3.3,
                    hashable,
                    unordered-containers,
-                   optparse-applicative       >= 0.7 && < 0.8,
+                   optparse-applicative       >= 0.8,
                    stringsearch               >= 0.3 && < 0.4,
                    -- for JMacro
                    regex-posix                >= 0.90 && < 0.100,
@@ -181,7 +181,7 @@
                       system-filepath      >= 0.4  && < 0.5,
                       shelly               >= 1.5  && < 1.6,
                       system-fileio        >= 0.3  && < 0.4,
-                      optparse-applicative >= 0.7  && < 0.8,
+                      optparse-applicative >= 0.8,
                       tar                  >= 0.4  && < 0.5,
                       zlib                 >= 0.5.4 && < 0.6,
                       bzlib                >= 0.5   && < 0.6,
--- old/src/Compiler/GhcjsProgram.hs.orig	2014-05-30 16:46:00.000000000 -0700
+++ new/src/Compiler/GhcjsProgram.hs	2014-05-30 16:57:23.440487977 -0700
@@ -98,12 +98,14 @@
 getGhcjsSettings :: [Located String] -> IO ([Located String], GhcjsSettings)
 getGhcjsSettings args =
   case p of
-    Left failure -> do
-      hPutStrLn stderr =<< errMessage failure "ghcjs"
-      exitWith (errExitCode failure)
-    Right gs1 -> do
+    Failure failure -> do
+      let (message, code) = execFailure failure "ghcjs"
+      hPutStrLn stderr message
+      exitWith code
+    Success gs1 -> do
       gs2 <- envSettings
       return (args', gs1 <> gs2)
+    CompletionInvoked r -> error "CompletionInvoked - I'm not sure what this is all about"
   where
     (ga,args') = partition (\a -> any (`isPrefixOf` unLoc a) as) args
     p = execParserPure (prefs mempty) optParser' (map unLoc ga)
--- old/src/Compiler/JMacro/Base.hs	2014-05-30 17:19:55.000000000 -0700
+++ new/src/Compiler/JMacro/Base.hs	2014-05-30 17:35:47.724564505 -0700
@@ -177,7 +177,7 @@
       | LeOp            -- <=
       | AddOp           -- +
       | SubOp           -- -
-      | MulOp           -- *
+      | MulOp           -- (this was a star, but it confused haddock)
       | DivOp           -- /
       | ModOp           -- %
       | LeftShiftOp     -- <<
--- old/src/Compiler/Variants.hs.orig	2014-05-30 16:58:44.000000000 -0700
+++ new/src/Compiler/Variants.hs	2014-05-30 18:06:24.000000000 -0700
@@ -25,12 +25,12 @@
                                -> ByteString
     , variantLink              :: DynFlags
                                -> GhcjsSettings
-                               -> FilePath                  -- ^ output directory
-                               -> [FilePath]                -- ^ include paths for home package
-                               -> [(PackageId, [FilePath])] -- ^ library dirs for dependencies
-                               -> [FilePath]                -- ^ object files
-                               -> [FilePath]                -- ^ extra JavaScript files
-                               -> (Gen2.Fun -> Bool)        -- ^ function to use as roots
+                               -> FilePath                  -- output directory
+                               -> [FilePath]                -- include paths for home package
+                               -> [(PackageId, [FilePath])] -- library dirs for dependencies
+                               -> [FilePath]                -- object files
+                               -> [FilePath]                -- extra JavaScript files
+                               -> (Gen2.Fun -> Bool)        -- function to use as roots
                                -> IO ()
     }
 
--- old/src/Gen2/ClosureInfo.hs.orig	2014-05-30 17:39:06.000000000 -0700
+++ new/src/Gen2/ClosureInfo.hs	2014-05-30 17:53:52.000000000 -0700
@@ -323,8 +323,8 @@
       in  skip + (nregs `shiftL` 8)
 
 
-data StaticInfo = StaticInfo { siVar    :: !Text      -- | global object
-                             , siVal    :: !StaticVal -- | static initialization
+data StaticInfo = StaticInfo { siVar    :: !Text      -- global object
+                             , siVal    :: !StaticVal -- static initialization
                              }
   deriving (Eq, Ord, Show, Typeable)
 
@@ -351,7 +351,7 @@
                | DoubleLit !SaneDouble -- should we actually use double here?
                | StringLit !Text
                | BinLit    !ByteString
-               | LabelLit  !Bool !Text -- | is function pointer, label (also used for string / binary init)
+               | LabelLit  !Bool !Text -- is function pointer, label (also used for string / binary init)
   deriving (Eq, Ord, Show, Typeable)
 
 instance ToJExpr StaticArg where
--- old/src/Gen2/Compactor.hs.orig	2014-05-30 17:39:06.000000000 -0700
+++ new/src/Gen2/Compactor.hs	2014-05-30 17:56:38.000000000 -0700
@@ -52,17 +52,17 @@
 import qualified Gen2.Optimizer as Optimizer
 
 data CompactorState =
-  CompactorState { _identSupply   :: [Ident]               -- | ident supply for new names
-                 , _nameMap       :: !(HashMap Text Ident) -- | renaming mapping for internal names
-                 , _entries       :: !(HashMap Text Int)   -- | entry functions (these get listed in the metadata init array)
+  CompactorState { _identSupply   :: [Ident]               -- ident supply for new names
+                 , _nameMap       :: !(HashMap Text Ident) -- renaming mapping for internal names
+                 , _entries       :: !(HashMap Text Int)   -- entry functions (these get listed in the metadata init array)
                  , _numEntries    :: !Int
-                 , _statics       :: !(HashMap Text Int)   -- | mapping of global closure -> index in current block, for static initialisation
-                 , _numStatics    :: !Int                  -- | number of static entries
-                 , _labels        :: !(HashMap Text Int)   -- | non-Haskell JS labels
-                 , _numLabels     :: !Int                  -- | number of labels
-                 , _parentEntries :: !(HashMap Text Int)   -- | entry functions we're not linking, offset where parent gets [0..n], grantparent [n+1..k] etc
-                 , _parentStatics :: !(HashMap Text Int)   -- | objects we're not linking in base bundle
-                 , _parentLabels  :: !(HashMap Text Int)   -- | non-Haskell JS labels in parent
+                 , _statics       :: !(HashMap Text Int)   -- mapping of global closure -> index in current block, for static initialisation
+                 , _numStatics    :: !Int                  -- number of static entries
+                 , _labels        :: !(HashMap Text Int)   -- non-Haskell JS labels
+                 , _numLabels     :: !Int                  -- number of labels
+                 , _parentEntries :: !(HashMap Text Int)   -- entry functions we're not linking, offset where parent gets [0..n], grantparent [n+1..k] etc
+                 , _parentStatics :: !(HashMap Text Int)   -- objects we're not linking in base bundle
+                 , _parentLabels  :: !(HashMap Text Int)   -- non-Haskell JS labels in parent
                  } deriving (Show)
 
 makeLenses ''CompactorState
@@ -305,7 +305,7 @@
   | (CIFun arity regs0) <- typ = [1, arity, encodeRegs regs] ++ ls
   | (CICon tag)         <- typ = [2, tag] ++ ls
   | CIStackFrame        <- typ = [3, encodeRegs regs] ++ ls
--- | (CIPap ar)         <- typ = [4, ar] ++ ls  -- these should only appear during runtime
+-- (CIPap ar)         <- typ = [4, ar] ++ ls  -- these should only appear during runtime
   | otherwise                  = error ("encodeInfo, unexpected closure type: " ++ show typ)
   where
     ls         = encodeLayout layout ++ encodeSrt static
--- old/src/Gen2/Generator.hs.orig	2014-05-30 17:39:06.000000000 -0700
+++ new/src/Gen2/Generator.hs	2014-05-30 18:02:48.000000000 -0700
@@ -1178,9 +1178,9 @@
 
 
 -- find a specialized application path if there is one
-selectApply :: Bool     ->    -- ^ true for fast apply, false for stack apply
-               ([StgArg], [JExpr]) ->    -- ^ arguments
-               G (JExpr,Bool) -- ^ the function to call, true if specialized path
+selectApply :: Bool     ->    -- true for fast apply, false for stack apply
+               ([StgArg], [JExpr]) ->    -- arguments
+               G (JExpr,Bool) -- the function to call, true if specialized path
 selectApply fast (args, as) = do
   case specApply fast (length args) (length as) of
     Just e  -> return (e, True)
--- old/src/Gen2/DynamicLinking.hs.orig	2014-05-30 16:58:44.000000000 -0700
+++ new/src/Gen2/DynamicLinking.hs	2014-05-30 18:10:45.000000000 -0700
@@ -341,9 +341,6 @@
     -- by the RTS.  We can't therefore use the ordinary way opts for these.
     let
         debug_opts | WayDebug `elem` ways dflags = [
--- #if defined(HAVE_LIBBFD)
---                        "-lbfd", "-liberty"
--- #endif
                          ]
                    | otherwise            = []
 
