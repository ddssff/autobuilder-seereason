--- old/Happstack/Fay.hs	2013-02-21 12:02:40.199053283 -0800
+++ new/Happstack/Fay.hs	2013-02-21 12:16:45.283008162 -0800
@@ -1,4 +1,4 @@
-{-# LANGUAGE OverloadedStrings #-}
+{-# LANGUAGE OverloadedStrings, NoImplicitPrelude, PackageImports  #-}
 {- |
 
 The server-side half of a typed AJAX communication channel.
@@ -48,10 +48,12 @@
 module Happstack.Fay where
 
 import Data.Aeson
-import Data.Data
+import "base" Data.Data
 import Happstack.Server
 import Language.Fay.AJAX
-import Language.Fay.Convert
+import Fay.Convert
+
+import "base" Prelude
 
 -- | decode the 'cmd' and call the response handler.
 --
--- old/happstack-fay.cabal	2013-02-21 12:02:40.195053283 -0800
+++ new/happstack-fay.cabal	2013-02-21 12:16:45.455008152 -0800
@@ -20,10 +20,10 @@
 library
   exposed-modules:     Language.Fay.AJAX,
                        Language.Fay.HTML,
-                       Happstack.Fay,
-                       Paths_happstack_fay
+                       Happstack.Fay
   build-depends:       base             > 4 && <5,
-                       fay              == 0.9.*,
-                       fay-jquery       == 0.1.*,
+                       fay              >= 0.14.1,
+                       fay-base         >= 0.14.1,
+                       fay-jquery       >= 0.3,
                        aeson            == 0.6.*,
                        happstack-server >= 7.0 && <7.2
--- old/Language/Fay/AJAX.hs	2013-02-21 12:02:40.199053283 -0800
+++ new/Language/Fay/AJAX.hs	2013-02-21 12:16:45.379008157 -0800
@@ -1,4 +1,4 @@
-{-# LANGUAGE DeriveDataTypeable, NoImplicitPrelude #-}
+{-# LANGUAGE DeriveDataTypeable, NoImplicitPrelude, PackageImports, CPP #-}
 {- |
 
 client-side half of a typed AJAX communication channel.
@@ -11,7 +11,6 @@
         = SendGuess Guess (ResponseType (Maybe Row))
         | FetchBoard (ResponseType (Maybe Board))
         deriving (Read, Show, Data, Typeable)
-    instance Foreign Command
 @
 
 The 'ResponseType' argument specifies what type each command should
@@ -34,14 +33,19 @@
 -}
 module Language.Fay.AJAX where
 
+#ifndef FAY
 import Language.Fay.FFI
-import Language.Fay.Prelude
+import "base" Prelude
+import "base" Data.Data
+#else
+import FFI
+import "fay-base" Prelude
+#endif
 
 -- | 'ResponseType' is used in lieu of `GADTs` as a mechanism for
 -- specifying the expected return type of remote AJAX calls.
 data ResponseType a = ResponseType
     deriving (Eq, Read, Show, Data, Typeable)
-instance Foreign (ResponseType a)
 
 -- | Asynchronously call a command
 --
@@ -50,8 +54,7 @@
 --
 -- This function is just a wrapper around 'ajaxCommand' which uses the
 -- 'ResponseType res' phantom-typed parameter for added type safety.
-call :: (Foreign cmd, Foreign res) =>
-        String                    -- ^ URL to 'POST' AJAX request to
+call :: String                    -- ^ URL to 'POST' AJAX request to
      -> (ResponseType res -> cmd) -- ^ AJAX command to send to server
      -> (res -> Fay ())           -- ^ callback function to handle response
      -> Fay ()
@@ -67,16 +70,9 @@
 -- code, the callback function will never be run.
 --
 -- see also: 'call'
-ajaxCommand :: (Foreign cmd, Foreign res) =>
-               String
+ajaxCommand :: String
             -> cmd
             -> (res -> Fay ())
             -> Fay ()
 ajaxCommand =
-    ffi "jQuery['ajax']({\
-        \ \"url\": %1, \
-        \ \"type\": 'POST', \
-        \ \"data\": { \"json\": JSON.stringify(%2) }, \
-        \ \"dataType\": 'json', \
-        \ \"success\" : %3 \
-        \})"
+    ffi "jQuery['ajax']({\"url\": %1,\"type\": 'POST', \"data\": { \"json\": JSON.stringify(%2) }, \"dataType\": 'json', \"success\" : %3 })"
--- old/Language/Fay/HTML.hs	2013-02-21 12:02:40.199053283 -0800
+++ new/Language/Fay/HTML.hs	2013-02-21 12:16:45.411008155 -0800
@@ -1,4 +1,4 @@
-{-# LANGUAGE NoImplicitPrelude #-}
+{-# LANGUAGE NoImplicitPrelude, PackageImports #-}
 {- |
 
 A simple library for client-side HTML generation.
@@ -6,9 +6,11 @@
 -}
 module Language.Fay.HTML where
 
-import Language.Fay.FFI
-import Language.Fay.Prelude
-import Language.Fay.JQuery
+import JQuery
+
+import FFI
+import "fay-base" Prelude
+
 
 
 -- | ADT for 'HTML'
@@ -39,6 +41,15 @@
                   do cElem <- renderHTML child
                      append cElem elem) children
        return elem
+renderHTML (CDATA True str) =
+    selectElement =<< createTextNode str
+renderHTML (CDATA False str) =
+    do alert "Unsure how to insert pre-escaped text into the generated HTML."
+       selectElement =<< createTextNode str
+    where
+      -- | Alert using window.alert.
+      alert :: String -> Fay ()
+      alert = ffi "window.alert(%1)"
 
 ------------------------------------------------------------------------------
 -- HTML Combinators
@@ -73,3 +84,12 @@
 createElement :: String -- ^ name of the element
               -> Fay Element
 createElement = ffi "document.createElement(%1)"
+
+-- | create a new text node
+--
+-- NOTE: this doesn't really return an Element. It returns a TextNode
+-- or something. But fay-jquery only supports the Element type...
+createTextNode :: String -- ^ text to insert in the node
+               -> Fay Element
+createTextNode = ffi "document.createTextNode(%1)"
+
