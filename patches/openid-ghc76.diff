--- old/openid.cabal	2012-12-16 18:33:41.000000000 -0800
+++ new/openid.cabal	2012-12-16 18:42:05.364473628 -0800
@@ -27,12 +27,13 @@
 
 library
   build-depends:   base       >= 4.0.0.0  && < 5.0.0.0,
-                   bytestring >= 0.9.1.0  && < 0.10.0.0,
-                   containers >= 0.2.0.0  && < 0.4.1.0,
-                   HTTP       >= 4000.0.9 && < 4000.2,
-                   monadLib   >= 3.6.0.0  && < 3.7.0.0,
-                   network    >= 2.2.0.0  && < 2.4.0.0,
-                   time       >= 1.1.0.0  && < 1.3.0.0,
+                   bytestring >= 0.9.1.0,
+                   containers >= 0.2.0.0,
+                   HTTP       >= 4000.0.9,
+                   monadLib   >= 3.6.0.0,
+                   old-exception,
+                   network    >= 2.2.0.0,
+                   time       >= 1.1.0.0,
                    xml        >= 1.3.0.0  && < 1.4.0.0,
                    HsOpenSSL  >= 0.9.0.0  && < 0.11.0.0
   hs-source-dirs:  src
--- old/src/Data/Digest/OpenSSL/AlternativeHMAC.hsc	2012-01-23 15:26:46.027160840 -0800
+++ new/src/Data/Digest/OpenSSL/AlternativeHMAC.hsc	2012-01-20 11:40:25.566842934 -0800
@@ -59,7 +59,7 @@
 showHMAC bs =
     concatMap draw $ BS.unpack bs
     where
-      draw :: (Integral a) => a -> String
+      draw :: (Integral a, Show a) => a -> String
       draw w = case showHex w [] of
                  [x] -> ['0', x]
                  x   -> x
--- old/src/Network/OpenID/SSL.hs.orig	2012-12-18 06:12:21.000000000 -0800
+++ new/src/Network/OpenID/SSL.hs	2012-12-18 06:18:08.499501745 -0800
@@ -17,6 +17,7 @@
 
 import OpenSSL.Session as Session
 import Control.Exception as E
+import Control.OldException as OE
 import Network.Socket
 import Network.Stream
 import qualified Data.ByteString as B
@@ -27,11 +28,11 @@
 
 data SSLHandle = SSLHandle SSLContext SSL
 
-wrap m = Right `fmap` m `Prelude.catch` handler
+wrap m = Right `fmap` m `OE.catch` handler
   where
     handler err = return $ Left $ ErrorMisc $ "write: " ++ show err
 
-wrapRead m = Right `fmap` m `catches` handlers
+wrapRead m = Right `fmap` m `E.catches` handlers
   where
     handlers :: [Handler (Either ConnError String)]
     handlers =
