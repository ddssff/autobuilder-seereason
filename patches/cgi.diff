--- old/cgi.cabal	2014-07-19 07:55:07.508456680 -0700
+++ new/cgi.cabal	2014-10-19 09:44:32.669797515 -0700
@@ -35,7 +35,7 @@
   ghc-options: -Wall
 
   Build-depends:
-    network >= 2.0,
+    network >= 2.6, network-uri >= 2.6,
     parsec >= 2.0,
     mtl >= 1.0,
     MonadCatchIO-mtl,
--- old/Network/CGI/Monad.hs.orig	2014-07-19 07:55:07.512456680 -0700
+++ new/Network/CGI/Monad.hs	2014-10-19 09:51:31.697799540 -0700
@@ -1,4 +1,5 @@
 {-# OPTIONS_GHC -fglasgow-exts #-}
+{-# LANGUAGE DeriveDataTypeable #-}
 -----------------------------------------------------------------------------
 -- |
 -- Module      :  Network.CGI.Monad
@@ -40,8 +41,7 @@
 import Control.Monad.Reader (ReaderT(..), asks)
 import Control.Monad.Writer (WriterT(..), tell)
 import Control.Monad.Trans (MonadTrans, MonadIO, liftIO, lift)
-import Data.Typeable (Typeable(..), Typeable1(..), 
-                      mkTyConApp, mkTyCon)
+import Data.Typeable
 
 import Network.CGI.Protocol
 
@@ -54,11 +54,7 @@
 type CGI a = CGIT IO a
 
 -- | The CGIT monad transformer.
-newtype CGIT m a = CGIT { unCGIT :: ReaderT CGIRequest (WriterT Headers m) a }
-
-instance (Typeable1 m, Typeable a) => Typeable (CGIT m a) where
-    typeOf _ = mkTyConApp (mkTyCon "Network.CGI.Monad.CGIT") 
-                [typeOf1 (undefined :: m a), typeOf (undefined :: a)]
+newtype CGIT m a = CGIT { unCGIT :: ReaderT CGIRequest (WriterT Headers m) a } deriving (Typeable)
 
 instance (Functor m, Monad m) => Functor (CGIT m) where
     fmap f c = CGIT (fmap f (unCGIT c))
--- old/Network/CGI/Protocol.hs.orig	2014-07-19 07:55:07.512456680 -0700
+++ old/Network/CGI/Protocol.hs	2014-10-19 09:51:25.781799511 -0700
@@ -1,3 +1,4 @@
+{-# LANGUAGE DeriveDataTypeable #-}
 -----------------------------------------------------------------------------
 -- |
 -- Module      :  Network.CGI.Protocol
@@ -44,7 +45,7 @@
 import qualified Data.ByteString.Lazy.Char8 as BS
 import Data.ByteString.Lazy.Char8 (ByteString)
 
-import Data.Typeable (Typeable(..), mkTyConApp, mkTyCon)
+import Data.Typeable
 
 import Network.CGI.Header
 import Network.CGI.Multipart
@@ -72,9 +73,6 @@
                }
     deriving (Show)
 
-instance Typeable CGIResult where
-    typeOf _ = mkTyConApp (mkTyCon "Network.CGI.Protocol.CGIResult") []
-
 -- | The value of an input parameter, and some metadata.
 data Input = Input {
                     inputValue :: ByteString,
@@ -90,7 +88,7 @@
 -- | The result of a CGI program.
 data CGIResult = CGIOutput ByteString
                | CGINothing
-                 deriving (Show, Read, Eq, Ord)
+                 deriving (Show, Read, Eq, Ord, Typeable)
 
 --
 -- * Running CGI actions
