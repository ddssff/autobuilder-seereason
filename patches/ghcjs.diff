--- old/Setup.hs	2014-06-07 08:33:07.699835895 -0700
+++ new/Setup.hs	2014-06-07 09:06:08.723891229 -0700
@@ -1,24 +1,106 @@
+{-# LANGUAGE FlexibleContexts #-}
+import Control.Applicative ((<$>))
+import Control.Exception.Lifted as IO (bracket)
+import Control.Monad.Trans (MonadIO, liftIO)
+import Control.Monad.Trans.Control (MonadBaseControl)
 import Distribution.Simple (defaultMainWithHooks, simpleUserHooks, hookedPrograms, UserHooks(..))
 import Distribution.Simple.Program.Types (simpleProgram)
-import Distribution.Simple.Setup (CopyDest(..), installVerbosity, copyVerbosity, fromFlag)
+import Distribution.Simple.Setup (CopyDest(..), ConfigFlags(..), Flag(..), installVerbosity, copyVerbosity, fromFlag)
 import Distribution.Simple.Utils (createDirectoryIfMissingVerbose, installOrdinaryFile)
 import Distribution.Simple.LocalBuildInfo (buildDir, absoluteInstallDirs, InstallDirs(..), LocalBuildInfo(..))
 import Distribution.PackageDescription (PackageDescription(..), BuildInfo(..), Executable(..))
+import System.Directory (getCurrentDirectory, setCurrentDirectory, createDirectoryIfMissing)
+import System.Environment (getEnvironment)
 import System.FilePath ((</>))
+import System.FilePath.Find (find, fileType, (==?), FileType(RegularFile))
+import System.IO (hPutStrLn, stderr, appendFile)
 import System.Process (rawSystem)
 import Control.Monad (when)
+import Data.List (drop)
 import Data.Maybe (maybe, listToMaybe)
 
-main = defaultMainWithHooks simpleUserHooks
-         { hookedPrograms = [simpleProgram "java"]
-         , postInst       = ghcjsPostInst
-         }
+main = defaultMainWithHooks $ showHooks $ simpleUserHooks { hookedPrograms = [simpleProgram "java"]
+                                                          , postBuild = ghcjsBoot
+                                                          , postCopy = ghcjsCopy }
 
-ghcjsPostInst _ _ pkgDesc lbi = when doBoot (autoboot >> return ())
+ghcjsBoot _ _ pkgDesc lbi@(LocalBuildInfo {configFlags = ConfigFlags {configDistPref = Flag dist}}) =
+    when doBoot (autoboot dist >> return ())
   where
     ghcjsexe = listToMaybe $ filter (\(Executable s _ _) -> s == "ghcjs") 
                  (executables . localPkgDescr $ lbi)
-    doBoot   = maybe False (any (==("x-boot", "True")).customFieldsBI.buildInfo) ghcjsexe
+    doBoot   = True -- maybe False (any (==("x-boot", "True")).customFieldsBI.buildInfo) ghcjsexe
+
+ghcjsCopy _ _ _ _ = do
+  -- getEnvironment >>= hPutStrLn stderr . show
+  -- Copy the files in /usr/share/ghcjs into the build directory and
+  -- add them to the ghcjs install file.
+  createDirectoryIfMissing True "debian/tmp"
+  rawSystem "cp" ["-apx", "/usr/share/ghcjs", "debian/tmp/"] >> return ()
+  files <- map (drop (length "/usr/share/ghcjs/")) <$> find (return True) (fileType ==? RegularFile) "/usr/share/ghcjs"
+  appendFile "debian/ghcjs.install" (unlines $ map (\ path -> "ghcjs" </> path ++ " " ++ "usr/share/ghcjs" </> path) $ files)
+
+autoboot pre = rawSystem (pre </> "build/ghcjs-boot/ghcjs-boot") ["--init"]
+
+showHooks :: UserHooks -> UserHooks
+showHooks hooks =
+   hooks {
+         -- , runTests = \ a b c d -> (runTests simpleUserHooks) a b c d -- :: Args -> Bool -> PackageDescription -> LocalBuildInfo -> IO ()
+           preConf =      \ a b ->       bracketMessage "preConf" $ (preConf hooks) a b        -- :: Args -> ConfigFlags -> IO HookedBuildInfo
+         , confHook =     \ a b ->       bracketMessage "confHook" $ (confHook hooks) a b -- :: (GenericPackageDescription, HookedBuildInfo) -> ConfigFlags -> IO LocalBuildInfo,
+         , postConf =     \ a b c d ->   bracketMessage "postConf" $ (postConf hooks) a b c d -- :: Args -> ConfigFlags -> PackageDescription -> LocalBuildInfo -> IO (),
+         , preBuild =     \ a b ->       bracketMessage "preBuild" $ (preBuild hooks) a b -- :: Args -> BuildFlags -> IO HookedBuildInfo,
+         , buildHook =    \ a b c d ->   bracketMessage "buildHook" $ (buildHook hooks) a b c d -- :: PackageDescription -> LocalBuildInfo -> UserHooks -> BuildFlags -> IO (),
+         , postBuild =    \ a b c d ->   bracketMessage "postBuild" $ (postBuild hooks) a b c d -- :: Args -> BuildFlags -> PackageDescription -> LocalBuildInfo -> IO (),
+         , preRepl =      \ a b ->       bracketMessage "preRepl" $ (preRepl hooks) a b -- :: Args -> ReplFlags -> IO HookedBuildInfo,
+         , replHook =     \ a b c d e -> bracketMessage "replHook" $ (replHook hooks) a b c d e -- :: PackageDescription -> LocalBuildInfo -> UserHooks -> ReplFlags -> [String] -> IO (),
+         , postRepl =     \ a b c d ->   bracketMessage "postRepl" $ (postRepl hooks) a b c d -- :: Args -> ReplFlags -> PackageDescription -> LocalBuildInfo -> IO (),
+         , preClean =     \ a b ->       bracketMessage "preClean" $ (preClean hooks) a b -- :: Args -> CleanFlags -> IO HookedBuildInfo,
+         , cleanHook =    \ a b c d ->   bracketMessage "cleanHook" $ (cleanHook hooks) a b c d -- :: PackageDescription -> () -> UserHooks -> CleanFlags -> IO (),
+         , postClean =    \ a b c d ->   bracketMessage "postClean" $ (postClean hooks) a b c d -- :: Args -> CleanFlags -> PackageDescription -> () -> IO (),
+         , preCopy =      \ a b ->       bracketMessage "preCopy" $ (preCopy hooks) a b -- :: Args -> CopyFlags -> IO HookedBuildInfo,
+         , copyHook =     \ a b c d ->   bracketMessage "copyHook" $ (copyHook hooks) a b c d -- :: PackageDescription -> LocalBuildInfo -> UserHooks -> CopyFlags -> IO (),
+         , postCopy =     \ a b c d ->   bracketMessage "postCopy" $ (postCopy hooks) a b c d -- :: Args -> CopyFlags -> PackageDescription -> LocalBuildInfo -> IO (),
+         , preInst =      \ a b ->       bracketMessage "preInst" $ (preInst hooks) a b -- :: Args -> InstallFlags -> IO HookedBuildInfo,
+         , instHook =     \ a b c d ->   bracketMessage "instHook" $ (instHook hooks) a b c d -- :: PackageDescription -> LocalBuildInfo -> UserHooks -> InstallFlags -> IO (),
+         , postInst =     \ a b c d ->   bracketMessage "postInst" $ (postInst hooks) a b c d -- :: Args -> InstallFlags -> PackageDescription -> LocalBuildInfo -> IO (),
+         , preSDist =     \ a b ->       bracketMessage "preSDist" $ (preSDist hooks) a b -- :: Args -> SDistFlags -> IO HookedBuildInfo,
+         , sDistHook =    \ a b c d ->   bracketMessage "sDistHook" $ (sDistHook hooks) a b c d -- :: PackageDescription -> Maybe LocalBuildInfo -> UserHooks -> SDistFlags -> IO (),
+         , postSDist =    \ a b c d ->   bracketMessage "postSDist" $ (postSDist hooks) a b c d -- :: Args -> SDistFlags -> PackageDescription -> Maybe LocalBuildInfo -> IO (),
+         , preReg =       \ a b ->       bracketMessage "preReg" $ (preReg hooks) a b -- :: Args -> RegisterFlags -> IO HookedBuildInfo,
+         , regHook =      \ a b c d ->   bracketMessage "regHook" $ (regHook hooks) a b c d -- :: PackageDescription -> LocalBuildInfo -> UserHooks -> RegisterFlags -> IO (),
+         , postReg =      \ a b c d ->   bracketMessage "postReg" $ (postReg hooks) a b c d -- :: Args -> RegisterFlags -> PackageDescription -> LocalBuildInfo -> IO (),
+         , preUnreg =     \ a b ->       bracketMessage "preUnreg" $ (preUnreg hooks) a b -- :: Args -> RegisterFlags -> IO HookedBuildInfo,
+         , unregHook =    \ a b c d ->   bracketMessage "unregHook" $ (unregHook hooks) a b c d -- :: PackageDescription -> LocalBuildInfo -> UserHooks -> RegisterFlags -> IO (),
+         , postUnreg =    \ a b c d ->   bracketMessage "postUnreg" $ (postUnreg hooks) a b c d -- :: Args -> RegisterFlags -> PackageDescription -> LocalBuildInfo -> IO (),
+         , preHscolour =  \ a b ->       bracketMessage "preHscolour" $ (preHscolour hooks) a b -- :: Args -> HscolourFlags -> IO HookedBuildInfo,
+         , hscolourHook = \ a b c d ->   bracketMessage "hscolourHook" $ (hscolourHook hooks) a b c d -- :: PackageDescription -> LocalBuildInfo -> UserHooks -> HscolourFlags -> IO (),
+         , postHscolour = \ a b c d ->   bracketMessage "postHscolour" $ (postHscolour hooks) a b c d -- :: Args -> HscolourFlags -> PackageDescription -> LocalBuildInfo -> IO (),
+         , preHaddock =   \ a b ->       bracketMessage "preHaddock" $ (preHaddock hooks) a b -- :: Args -> HaddockFlags -> IO HookedBuildInfo,
+         , haddockHook =  \ a b c d ->   bracketMessage "haddockHook" $ (haddockHook hooks) a b c d -- :: PackageDescription -> LocalBuildInfo -> UserHooks -> HaddockFlags -> IO (),
+         , postHaddock =  \ a b c d ->   bracketMessage "postHaddock" $ (postHaddock hooks) a b c d -- :: Args -> HaddockFlags -> PackageDescription -> LocalBuildInfo -> IO (),
+         , preTest =      \ a b ->       bracketMessage "preTest" $ (preTest hooks) a b -- :: Args -> TestFlags -> IO HookedBuildInfo,
+         , testHook =     \ a b c d ->   bracketMessage "testHook" $ (testHook hooks) a b c d -- :: PackageDescription -> LocalBuildInfo -> UserHooks -> TestFlags -> IO (),
+         , postTest =     \ a b c d ->   bracketMessage "postTest" $ (postTest hooks) a b c d -- :: Args -> TestFlags -> PackageDescription -> LocalBuildInfo -> IO (),
+         , preBench =     \ a b ->       bracketMessage "preBench" $ (preBench hooks) a b -- :: Args -> BenchmarkFlags -> IO HookedBuildInfo,
+         , benchHook =    \ a b c d e -> bracketMessage "benchHook" $ (benchHook hooks) a b c d e -- :: Args -> PackageDescription -> LocalBuildInfo -> UserHooks -> BenchmarkFlags -> IO (),
+         , postBench =    \ a b c d ->   bracketMessage "postBench" $ (postBench hooks) a b c d -- :: Args -> BenchmarkFlags -> PackageDescription -> LocalBuildInfo -> IO ()
+         }
+    where
+      bracketMessage s x = hPutStrLn stderr ("--> " ++ s) >> x >>= \ r -> hPutStrLn stderr ("<-- " ++ s) >> return r
 
-autoboot = rawSystem "ghcjs-boot" ["--auto"] -- fixme make sure that the one from the current install is being run
+-- | Perform an action with the working directory set to @path@.
+withCurrentDirectory :: (MonadIO m, MonadBaseControl IO m) => FilePath -> m a -> m a
+withCurrentDirectory path action =
+    bracket acquire release (const action)
+    where
+      acquire = liftIO getCurrentDirectory >>= \ save -> liftIO (setCurrentDirectory path) >> return save
+      release = liftIO . setCurrentDirectory
 
+{-
+withCurrentDirectory :: FilePath -> IO a -> IO a
+withCurrentDirectory path action =
+    bracket acquire release (const action)
+    where
+      acquire = getCurrentDirectory >>= \ orig -> setCurrentDirectory path >> return orig
+      release = setCurrentDirectory
+-}
--- old/ghcjs.cabal	2014-06-05 15:07:30.495670232 -0700
+++ new/ghcjs.cabal	2014-06-05 15:12:35.259678745 -0700
@@ -90,7 +90,7 @@
                    aeson          >= 0.7      && < 0.8,
                    text           >= 0.11     && < 1.2,
                    wl-pprint-text >= 1.1      && < 1.2,
-                   lens           >= 4.0      && < 4.2,
+                   lens           >= 4.0      && < 4.3,
                    yaml           >= 0.8      && < 0.9,
                    time,
                    system-filepath,
@@ -113,12 +113,13 @@
                    safe                       >= 0.3  && < 0.4,
                    parsec                     >= 3.1  && < 3.2,
                    haskell-src-exts           >= 1.15 && < 1.16,
-                   haskell-src-meta           >= 0.6.0.3  && < 0.7
+                   haskell-src-meta           >= 0.6.0.3  && < 0.7,
+                   filemanip
     exposed: True
     buildable: True
     hs-source-dirs: src
     include-dirs: include
-    GHC-Options: -O2 -fno-warn-orphans -auto-all -Wall
+    GHC-Options: -O2 -fno-warn-orphans -auto-all -Wall -package Cabal-1.21.0.0 -package Cabal-1.18.1.3
 
 Executable ghcjs
     Main-Is:        Main.hs
@@ -126,7 +127,7 @@
     hs-source-dirs: src-bin
     Build-Depends:  base                >= 4    &&  < 5,
                     ghcjs
-    GHC-Options:    -O2 -rtsopts -with-rtsopts=-N -with-rtsopts=-K256m -threaded
+    GHC-Options:    -O2 -rtsopts -with-rtsopts=-N -with-rtsopts=-K256m -threaded -package Cabal-1.21.0.0 -package Cabal-1.18.1.3
 
 Executable haddock-ghcjs
     if os(Windows)
@@ -138,7 +139,7 @@
                     process,
                     filepath,
                     ghcjs
-    GHC-Options:    -O
+    GHC-Options:    -O -package Cabal-1.21.0.0 -package Cabal-1.18.1.3
 
 Executable ghcjs-pkg
     if flag(compiler-only)
@@ -146,6 +147,7 @@
     Main-Is:          Pkg.hs
     Default-Language: Haskell2010
     Hs-Source-Dirs:   src-bin
+    ghc-options:  -package Cabal-1.21.0.0 -package Cabal-1.18.1.3
     Build-Depends:    ghcjs,
                       base       >= 4   && < 5,
                       directory  >= 1   && < 1.3,
@@ -169,6 +171,7 @@
     Main-Is:          Boot.hs
     Default-Language: Haskell2010
     Hs-Source-Dirs:   src-bin
+    ghc-options:  -package Cabal-1.21.0.0 -package Cabal-1.18.1.3
     Build-Depends:    base                 >= 4    && < 5,
                       ghcjs,
                       directory,
@@ -191,7 +194,7 @@
     type:             exitcode-stdio-1.0
     Default-Language: Haskell2010
     hs-source-dirs:   test
-    ghc-options: -threaded -O
+    ghc-options: -threaded -O -package Cabal-1.21.0.0 -package Cabal-1.18.1.3
     main-is:          TestRunner.hs
     build-depends:    base                 >= 4 && < 5,
                       process,
--- old/src/Compiler/JMacro/Base.hs	2014-05-30 17:19:55.000000000 -0700
+++ new/src/Compiler/JMacro/Base.hs	2014-05-30 17:35:47.724564505 -0700
@@ -177,7 +177,7 @@
       | LeOp            -- <=
       | AddOp           -- +
       | SubOp           -- -
-      | MulOp           -- *
+      | MulOp           -- (this was a star, but it confused haddock)
       | DivOp           -- /
       | ModOp           -- %
       | LeftShiftOp     -- <<
--- old/src/Compiler/Program.hs	2014-06-07 05:57:25.651574955 -0700
+++ new/src/Compiler/Program.hs	2014-06-07 06:08:30.987593539 -0700
@@ -667,7 +667,7 @@
   , Flag "M"            (PassFlag (setMode doMkDependHSMode))
   , Flag "E"            (PassFlag (setMode (stopBeforeMode anyHsc)))
   , Flag "C"            (PassFlag (setMode (stopBeforeMode HCc)))
-  , Flag "S"            (PassFlag (setMode (stopBeforeMode As)))
+  , Flag "S"            (PassFlag (setMode (stopBeforeMode (As False))))
   , Flag "-make"        (PassFlag (setMode doMakeMode))
   , Flag "-interactive" (PassFlag (setMode doInteractiveMode))
   , Flag "-abi-hash"    (PassFlag (setMode doAbiHashMode))
@@ -744,7 +744,7 @@
         haskellish (f,Nothing) =
           looksLikeModuleName f || isHaskellUserSrcFilename f || '.' `notElem` f
         haskellish (_,Just phase) =
-          phase `notElem` [As, Cc, Cobjc, Cobjcpp, CmmCpp, Cmm, StopLn]
+          phase `notElem` [As False, As True, Cc, Cobjc, Cobjcpp, CmmCpp, Cmm, StopLn]
 
     hsc_env <- GHC.getSession
 
--- old/src/Compiler/Variants.hs.orig	2014-05-30 16:58:44.000000000 -0700
+++ new/src/Compiler/Variants.hs	2014-05-30 18:06:24.000000000 -0700
@@ -25,12 +25,12 @@
                                -> ByteString
     , variantLink              :: DynFlags
                                -> GhcjsSettings
-                               -> FilePath                  -- ^ output directory
-                               -> [FilePath]                -- ^ include paths for home package
-                               -> [(PackageId, [FilePath])] -- ^ library dirs for dependencies
-                               -> [FilePath]                -- ^ object files
-                               -> [FilePath]                -- ^ extra JavaScript files
-                               -> (Gen2.Fun -> Bool)        -- ^ function to use as roots
+                               -> FilePath                  -- output directory
+                               -> [FilePath]                -- include paths for home package
+                               -> [(PackageId, [FilePath])] -- library dirs for dependencies
+                               -> [FilePath]                -- object files
+                               -> [FilePath]                -- extra JavaScript files
+                               -> (Gen2.Fun -> Bool)        -- function to use as roots
                                -> IO ()
     }
 
--- old/src/Gen2/ClosureInfo.hs.orig	2014-05-30 17:39:06.000000000 -0700
+++ new/src/Gen2/ClosureInfo.hs	2014-05-30 17:53:52.000000000 -0700
@@ -323,8 +323,8 @@
       in  skip + (nregs `shiftL` 8)
 
 
-data StaticInfo = StaticInfo { siVar    :: !Text      -- | global object
-                             , siVal    :: !StaticVal -- | static initialization
+data StaticInfo = StaticInfo { siVar    :: !Text      -- global object
+                             , siVal    :: !StaticVal -- static initialization
                              }
   deriving (Eq, Ord, Show, Typeable)
 
@@ -351,7 +351,7 @@
                | DoubleLit !SaneDouble -- should we actually use double here?
                | StringLit !Text
                | BinLit    !ByteString
-               | LabelLit  !Bool !Text -- | is function pointer, label (also used for string / binary init)
+               | LabelLit  !Bool !Text -- is function pointer, label (also used for string / binary init)
   deriving (Eq, Ord, Show, Typeable)
 
 instance ToJExpr StaticArg where
--- old/src/Gen2/Compactor.hs.orig	2014-05-30 17:39:06.000000000 -0700
+++ new/src/Gen2/Compactor.hs	2014-05-30 17:56:38.000000000 -0700
@@ -305,7 +305,7 @@
   | (CIFun arity regs0) <- typ = [1, arity, encodeRegs regs] ++ ls
   | (CICon tag)         <- typ = [2, tag] ++ ls
   | CIStackFrame        <- typ = [3, encodeRegs regs] ++ ls
--- | (CIPap ar)         <- typ = [4, ar] ++ ls  -- these should only appear during runtime
+-- (CIPap ar)         <- typ = [4, ar] ++ ls  -- these should only appear during runtime
   | otherwise                  = error ("encodeInfo, unexpected closure type: " ++ show typ)
   where
     ls         = encodeLayout layout ++ encodeSrt static
--- old/src/Gen2/Generator.hs.orig	2014-05-30 17:39:06.000000000 -0700
+++ new/src/Gen2/Generator.hs	2014-05-30 18:02:48.000000000 -0700
@@ -1178,9 +1178,9 @@
 
 
 -- find a specialized application path if there is one
-selectApply :: Bool     ->    -- ^ true for fast apply, false for stack apply
-               ([StgArg], [JExpr]) ->    -- ^ arguments
-               G (JExpr,Bool) -- ^ the function to call, true if specialized path
+selectApply :: Bool     ->    -- true for fast apply, false for stack apply
+               ([StgArg], [JExpr]) ->    -- arguments
+               G (JExpr,Bool) -- the function to call, true if specialized path
 selectApply fast (args, as) = do
   case specApply fast (length args) (length as) of
     Just e  -> return (e, True)
--- old/src/Gen2/DynamicLinking.hs.orig	2014-05-30 16:58:44.000000000 -0700
+++ new/src/Gen2/DynamicLinking.hs	2014-05-30 18:10:45.000000000 -0700
@@ -341,9 +341,6 @@
     -- by the RTS.  We can't therefore use the ordinary way opts for these.
     let
         debug_opts | WayDebug `elem` ways dflags = [
--- #if defined(HAVE_LIBBFD)
---                        "-lbfd", "-liberty"
--- #endif
                          ]
                    | otherwise            = []
 
--- old/src/Compiler/GhcjsHooks.hs	2014-06-07 05:57:25.651574955 -0700
+++ new/src/Compiler/GhcjsHooks.hs	2014-06-07 06:06:58.075590944 -0700
@@ -149,10 +149,10 @@
   | Just next <- lookup ph skipPhases = do
     output <- phaseOutputFilename next
     liftIO (copyFile input output)
-    when (ph == As) (liftIO $ doFakeNative dflags (dropExtension output))
+    case ph of As _ -> (liftIO $ doFakeNative dflags (dropExtension output)); _ -> return ()
     return (RealPhase next, output)
   where
-    skipPhases = [ (CmmCpp, Cmm), (Cmm, As), (As, StopLn) ]
+    skipPhases = [ (CmmCpp, Cmm), (Cmm, As False), (Cmm, As True), (As False, StopLn), (As True, StopLn) ]
 
 -- otherwise use default
 runGhcjsPhase _ _ p input dflags = runPhase p input dflags
--- old/src/Compiler/Info.hs.orig	2014-06-07 10:44:53.924056730 -0700
+++ new/src/Compiler/Info.hs	2014-06-07 11:05:45.428091687 -0700
@@ -5,7 +5,6 @@
 import           Data.List          (nubBy)
 import qualified Data.Version as Version
 
-import           System.Directory   (getAppUserDataDirectory)
 import           System.FilePath    ((</>))
 import           System.Info
 
@@ -31,7 +30,7 @@
 
 getGlobalPackageBase :: IO FilePath
 getGlobalPackageBase = do
-  appdir <- getAppUserDataDirectory "ghcjs"
+  appdir <- return "/usr/share/ghcjs"
   return (appdir </> subdir)
       where
         targetARCH = arch
