diff -ru old/jmacro.cabal new/jmacro.cabal
--- old/jmacro.cabal	2019-01-01 10:06:06.372797325 -0800
+++ new/jmacro.cabal	2019-01-01 18:14:36.000000000 -0800
@@ -13,7 +13,11 @@
 Cabal-Version:       >= 1.6
 
 library
-  build-depends:     base >= 4.9, base < 5, containers, wl-pprint-text, text, safe >= 0.2, parsec > 3.0, template-haskell >= 2.3, mtl > 1.1 , haskell-src-exts, haskell-src-meta, bytestring >= 0.9, syb, aeson >= 0.5 , regex-posix > 0.9, vector >= 0.8, unordered-containers >= 0.2
+  build-depends:     base >= 4.9, base < 5, containers, wl-pprint-text, text, safe >= 0.2, parsec > 3.0, template-haskell >= 2.3, mtl > 1.1 , haskell-src-exts, haskell-src-meta, bytestring >= 0.9, syb, aeson >= 0.5, vector >= 0.8, unordered-containers >= 0.2
+  if impl(ghcjs)
+    build-depends: regex-base, regex-tdfa, regex-compat-tdfa
+  else
+    build-depends: regex-posix > 0.9
 
   exposed-modules:   Language.Javascript.JMacro
                      Language.Javascript.JMacro.Util
@@ -30,7 +34,11 @@
   default: False
 
 executable jmacro
-   build-depends:     base >= 4, base < 5, containers, wl-pprint-text, text, safe >= 0.2, parsec > 3.0, template-haskell >= 2.3, mtl > 1.1 , haskell-src-exts, haskell-src-meta, bytestring >= 0.9, syb, aeson >= 0.5 , regex-posix > 0.9, vector >= 0.8, unordered-containers >= 0.2, parseargs
+   build-depends:     base >= 4, base < 5, containers, wl-pprint-text, text, safe >= 0.2, parsec > 3.0, template-haskell >= 2.3, mtl > 1.1 , haskell-src-exts, haskell-src-meta, bytestring >= 0.9, syb, aeson >= 0.5, vector >= 0.8, unordered-containers >= 0.2, parseargs
+   if impl(ghcjs)
+     build-depends: regex-base, regex-tdfa, regex-compat-tdfa
+   else
+     build-depends: regex-posix > 0.9
    main-is: Language/Javascript/JMacro/Executable.hs
    other-modules: Language.Javascript.JMacro.Util
                    Language.Javascript.JMacro.TypeCheck
diff -ru old/Language/Javascript/JMacro/Base.hs new/Language/Javascript/JMacro/Base.hs
--- old/Language/Javascript/JMacro/Base.hs	2018-05-10 11:17:11.000000000 -0700
+++ new/Language/Javascript/JMacro/Base.hs	2019-01-01 18:14:36.000000000 -0800
@@ -86,7 +86,7 @@
 
 takeOne :: State [Ident] Ident
 takeOne = do
-  (x:xs) <- get
+  ~(x:xs) <- get
   put xs
   return x
 
@@ -399,7 +399,7 @@
     JMGId _ -> jtoGADT $ f x
     where
         inScope z = IS $ do
-            ([StrI a], b) <- splitAt 1 `fmap` get
+            ~([StrI a], b) <- splitAt 1 `fmap` get
             put b
             return $ withHygiene_ a f z
 
@@ -428,19 +428,19 @@
                                 ('!':'!':i') -> (DeclStat (StrI i') t:) <$> blocks xs
                                 ('!':i') -> (DeclStat (StrI i') t:) <$> blocks xs
                                 _ -> do
-                                  (newI:st) <- get
+                                  ~(newI:st) <- get
                                   put st
                                   rest <- blocks xs
                                   return $ [DeclStat newI t `mappend` jsReplace_ [(StrI i, newI)] (BlockStat rest)]
                              blocks (x':xs) = (jfromGADT <$> go (jtoGADT x')) <:> blocks xs
                              (<:>) = liftM2 (:)
                    (JMGStat (ForInStat b (StrI i) e s)) -> do
-                          (newI:st) <- get
+                          ~(newI:st) <- get
                           put st
                           rest <- jfromGADT <$> go (jtoGADT s)
                           return $ JMGStat . ForInStat b newI e $ jsReplace_ [(StrI i, newI)] rest
                    (JMGStat (TryStat s (StrI i) s1 s2)) -> do
-                          (newI:st) <- get
+                          ~(newI:st) <- get
                           put st
                           t <- jfromGADT <$> go (jtoGADT s)
                           c <- jfromGADT <$> go (jtoGADT s1)
Only in ./Language/Javascript/JMacro: Conversation.hs
diff -ru old/Language/Javascript/JMacro/QQ.hs new/Language/Javascript/JMacro/QQ.hs
--- old/Language/Javascript/JMacro/QQ.hs	2019-01-01 10:06:06.372797325 -0800
+++ new/Language/Javascript/JMacro/QQ.hs	2019-01-01 18:14:36.000000000 -0800
@@ -1,4 +1,4 @@
-{-# LANGUAGE FlexibleInstances, UndecidableInstances, OverlappingInstances, TypeFamilies, TemplateHaskell, QuasiQuotes, RankNTypes, GADTs #-}
+{-# LANGUAGE CPP, FlexibleInstances, UndecidableInstances, OverlappingInstances, TypeFamilies, TemplateHaskell, QuasiQuotes, RankNTypes, GADTs #-}
 
 -----------------------------------------------------------------------------
 {- |
@@ -36,7 +36,12 @@
 import qualified Text.ParserCombinators.Parsec.Token as P
 import Text.ParserCombinators.Parsec.Language(javaStyle)
 
+#if __GHCJS__
+import Text.Regex.Base
+import Text.Regex.TDFA.String
+#else
 import Text.Regex.Posix.String
+#endif
 
 import Language.Javascript.JMacro.Base
 import Language.Javascript.JMacro.Types
@@ -590,10 +595,17 @@
 --args :: JMParser [JExpr]
 --args = parens $ commaSep expr
 
+#if __GHCJS__
+compileRegex :: String -> Either String Regex
+compileRegex s = compile co eo s
+    where co = defaultCompOpt
+          eo = defaultExecOpt
+#else
 compileRegex :: String -> Either WrapError Regex
 compileRegex s = unsafePerformIO $ compile co eo s
     where co = compExtended
           eo = execBlank
+#endif
 
 expr :: JMParser JExpr
 expr = do
