--- old/Setup.hs	2014-06-19 12:49:04.403755249 -0700
+++ new/Setup.hs	2014-06-19 11:46:02.455649613 -0700
@@ -1,3 +1,4 @@
+{-# LANGUAGE OverloadedStrings #-}
 import System.IO (hPutStrLn, stderr)
 
 import Distribution.Simple (defaultMainWithHooks, simpleUserHooks, hookedPrograms, UserHooks(..))
@@ -6,24 +7,81 @@
 import Distribution.Simple.Utils (createDirectoryIfMissingVerbose, installOrdinaryFile)
 import Distribution.Simple.LocalBuildInfo (buildDir, absoluteInstallDirs, InstallDirs(..), LocalBuildInfo(..))
 import Distribution.PackageDescription (PackageDescription(..), BuildInfo(..), Executable(..))
-import System.FilePath ((</>))
+
 import System.Process (rawSystem)
 import Control.Monad (when)
 import Data.Maybe (maybe, listToMaybe)
+import Prelude hiding (FilePath, lines, unlines)
+import Data.Char (toLower)
+import Data.List (intercalate, intersperse)
+import Data.Maybe (mapMaybe)
+import Debian.Relation (BinPkgName(..))
+import System.Environment (setEnv)
+import Filesystem.Path (dirname)
+import Shelly
+import Text.Regex.TDFA
+import Data.Text (Text, pack, unpack, unlines, lines)
+import Data.Monoid ((<>))
+
+default (Text)
+
+-- Find the list of libraries built into ghcjs, turn them into debian
+-- virtual package names, and append an assignment to variable
+-- haskell:Provides into the ghcjs.substvars file.
+
+hcProvides :: FilePath -> IO ()
+hcProvides dir = do
+  setEnv "HOME" "/homedoesnotexistatbuildtime"
+  shelly $ do
+    pkgs <- pwd >>= \ here -> run (here </> dir </> fromText "ghcjs-pkg/ghcjs-pkg") ["list", "-v2"] >>= return . concatMap (parseLib . unpack) . lines
+    liftIO $ appendFile "debian/ghcjs.substvars" ("haskell:Provides=" ++ intercalate ", " (map (\ (BinPkgName name) -> name) pkgs))
+    where
+      parseLib :: String -> [BinPkgName]
+      parseLib s = case s =~ ("^.*\\((.*)-([0-9.]*)-(.....)...........................\\)$" :: String) :: (String, String, String, [String]) of
+                     (_, _, _, [name,ver,sum]) ->
+                         [BinPkgName ("libghcjs-" <> map toLower name <> "-dev"),
+                          BinPkgName ("libghcjs-" <> map toLower name <> "-dev-" <> ver <> "-" <> sum)]
+                     _ -> []
 
 main = defaultMainWithHooks $ showHooks $ simpleUserHooks
          { hookedPrograms = [simpleProgram "java"]
+         , preConf        = \ a b -> ghcjsPreConf >> preConf simpleUserHooks a b
+         , postCopy       = \ a b c lbi -> hcProvides (buildDir' lbi) >> postCopy simpleUserHooks a b c lbi
+         , postBuild      = \ a b c lbi -> ghcjsPostBuild (buildDir' lbi) >> postBuild simpleUserHooks a b c lbi
          , postInst       = ghcjsPostInst
          }
 
-ghcjsPostInst _ _ pkgDesc lbi = when doBoot (autoboot >> return ())
+ghcjsPostInst _ _ pkgDesc lbi = shelly $ do
+  when doBoot (autoboot lbi >> return ())
   where
     ghcjsexe = listToMaybe $ filter (\(Executable s _ _) -> s == "ghcjs") 
                  (executables . localPkgDescr $ lbi)
     doBoot   = maybe False (any (==("x-boot", "True")).customFieldsBI.buildInfo) ghcjsexe
 
-autoboot = rawSystem "ghcjs-boot" ["--auto"] -- fixme make sure that the one from the current install is being run
+ghcjsPreConf = shelly $ do
+  mapM_ (\ p -> run "apt-get" ["remove", "--yes", p]) ["ghcjs-tools", "ghcjs", "libghcjs-ghcjs-dom-dev", "libghcjs-ghcjs-dom-doc"]
+  mapM_ rm_rf ["/homedoesnotexistatbuildtime", "homedoesnotexistatbuildtime"]
+
+
+ghcjsPostBuild bdir = shelly $ do
+  run_ "cabal" ["update"]
+  cp (bdir </> fromText "ghcjs/ghcjs") "/usr/bin/ghcjs"
+  cp (bdir </> fromText "ghcjs-pkg/ghcjs-pkg") "/usr/bin/ghcjs-pkg"
+  pwd >>= \ here -> run_ (here </> bdir </> fromText "ghcjs-boot/ghcjs-boot") ["--init"]
+  let junk = ["*/config.guess", "*/config.sub", "*/ghcjs-boot", "*/packages/hackage.haskell.org", "*/.cabal/logs"]
+  run "find" (["/homedoesnotexistatbuildtime"] ++ concat (intersperse ["-o"] (map (\ p -> ["-path", p]) junk))) >>= mapM_ (rm_rf . fromText) . lines
+  run_ "cp" ["-apx", "/homedoesnotexistatbuildtime", "homedoesnotexistatbuildtime"]
+  run "find" ["/homedoesnotexistatbuildtime", "-type", "f"] >>=
+    liftIO . appendFile "debian/ghcjs.install" . unpack . unlines . map (\ s -> s <> " " <> (toTextIgnore . dirname . fromText $ s)) . lines
+
+
+
+autoboot lbi = run_ (buildDir' lbi </> fromText "ghcjs-boot/ghcjs-boot") ["--auto"] -- fixme make sure that the one from the current install is being run
+
+buildDir' :: LocalBuildInfo -> FilePath
+buildDir' = fromText . pack . buildDir
 
+fromString = fromText . pack
 
 showHooks :: UserHooks -> UserHooks
 showHooks hooks =
diff -ru old/src-bin/Boot.hs new/src-bin/Boot.hs
--- old/src-bin/Boot.hs	2014-06-21 13:22:11.070766243 -0700
+++ new/src-bin/Boot.hs	2014-06-21 13:21:02.730764629 -0700
@@ -15,6 +15,7 @@
 import Control.Monad
 import Options.Applicative
 import qualified Control.Exception as Ex
+import System.Environment (setEnv)
 import System.Exit (exitSuccess, exitFailure)
 import Filesystem.Path hiding ((<.>), (</>), null)
 
@@ -30,6 +31,7 @@
 default (Text)
 
 main = do
+    setEnv "HOME" "/homedoesnotexistatbuildtime"
     settings <- adjustDefaultSettings <$> execParser optParser'
     when (showVersion settings) (printVersion >> exitSuccess)
     r <- (shelly $ actions settings `catchany_sh` (return . Just))
@@ -437,6 +439,7 @@
       incNative = lib  </> "include_native"
       rtsLib    = lib  </> "rts-1.0"
   rtsConf <- readfile (Paths.libdir </> "package.conf.d" </> "builtin_rts.conf")
+  mkdir_p (fromString dest)
   writefile (dest </> "builtin_rts.conf") $
                  fixRtsConf (toTextIgnore inc) (toTextIgnore rtsLib) rtsConf
   ghcjs_pkg' ["recache", "--global"]
