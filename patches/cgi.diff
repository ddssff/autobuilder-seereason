diff -ru old/cgi.cabal new/cgi.cabal
--- old/cgi.cabal	2014-01-14 16:23:57.127628778 -0800
+++ new/cgi.cabal	2014-01-15 16:13:48.224860633 -0800
@@ -38,7 +38,7 @@
     network >= 2.0,
     parsec >= 2.0,
     mtl >= 1.0,
-    MonadCatchIO-mtl,
+    exceptions,
     xhtml >= 3000.0.0
   If flag(split-base)
     Build-depends: base >= 3 && < 5, old-time, old-locale, containers
diff -ru old/Network/CGI/Monad.hs new/Network/CGI/Monad.hs
--- old/Network/CGI/Monad.hs	2014-01-14 16:23:57.131628778 -0800
+++ new/Network/CGI/Monad.hs	2014-01-15 16:18:54.616865032 -0800
@@ -35,7 +35,7 @@
 #endif
   as Exception (SomeException, throwIO)
 import Control.Monad (liftM)
-import Control.Monad.CatchIO (MonadCatchIO, block, catch, try, unblock)
+import Control.Monad.Catch (MonadCatch, catch, try)
 import Control.Monad.Error (MonadError(..))
 import Control.Monad.Reader (ReaderT(..), asks)
 import Control.Monad.Writer (WriterT(..), tell)
@@ -72,10 +72,8 @@
 instance MonadIO m => MonadIO (CGIT m) where
     liftIO = lift . liftIO
 
-instance MonadCatchIO m => MonadCatchIO (CGIT m) where
+instance MonadCatch m => MonadCatch (CGIT m) where
     CGIT m `catch` h = CGIT $ m `catch` (unCGIT . h)
-    block (CGIT m) = CGIT (block m)
-    unblock (CGIT m) = CGIT (unblock m)
 
 -- | The class of CGI monads. Most CGI actions can be run in
 --   any monad which is an instance of this class, which means that
@@ -103,7 +101,7 @@
 -- * Error handling
 --
 
-instance MonadCatchIO m => MonadError SomeException (CGIT m) where
+instance (MonadCatch m, MonadIO m) => MonadError SomeException (CGIT m) where
     throwError = throwCGI
     catchError = catchCGI
 
@@ -114,15 +112,15 @@
 
 -- | Catches any expection thrown by a CGI action, and uses the given 
 --   exception handler if an exception is thrown.
-catchCGI :: (MonadCGI m, MonadCatchIO m) => m a -> (SomeException -> m a) -> m a
+catchCGI :: (MonadCGI m, MonadCatch m) => m a -> (SomeException -> m a) -> m a
 catchCGI = catch
 
 -- | Catches any exception thrown by an CGI action, and returns either
 --   the exception, or if no exception was raised, the result of the action.
-tryCGI :: (MonadCGI m, MonadCatchIO m) => m a -> m (Either SomeException a)
+tryCGI :: (MonadCGI m, MonadCatch m, Functor m) => m a -> m (Either SomeException a)
 tryCGI = try
 
 {-# DEPRECATED handleExceptionCGI "Use catchCGI instead." #-}
 -- | Deprecated version of 'catchCGI'. Use 'catchCGI' instead.
-handleExceptionCGI :: (MonadCGI m, MonadCatchIO m) => m a -> (SomeException -> m a) -> m a
+handleExceptionCGI :: (MonadCGI m, MonadCatch m) => m a -> (SomeException -> m a) -> m a
 handleExceptionCGI = catchCGI
diff -ru old/Network/CGI.hs new/Network/CGI.hs
--- old/Network/CGI.hs	2014-01-14 16:23:57.127628778 -0800
+++ new/Network/CGI.hs	2014-01-15 16:18:08.008864363 -0800
@@ -101,7 +101,7 @@
 #endif
   (Exception(..), SomeException, ErrorCall(..))
 import Control.Monad (liftM)
-import Control.Monad.CatchIO (MonadCatchIO)
+import Control.Monad.Catch (MonadCatch)
 import Control.Monad.Trans (MonadIO, liftIO)
 import Data.Char (toUpper)
 import Data.List (intersperse, sort, group)
@@ -180,7 +180,7 @@
 -- >
 -- > main :: IO ()
 -- > main = runCGI (handleErrors cgiMain)
-handleErrors :: (MonadCGI m, MonadCatchIO m) => m CGIResult -> m CGIResult
+handleErrors :: (MonadCGI m, MonadCatch m, MonadIO m) => m CGIResult -> m CGIResult
 handleErrors = flip catchCGI outputException
 
 --
