--- old/hsx.cabal	2014-06-04 18:29:11.189594923 -0700
+++ new/hsx.cabal	2014-06-05 11:11:29.223274683 -0700
@@ -41,7 +41,7 @@
 Flag base4
 
 Library
-  Build-depends:	mtl, haskell-src-exts >= 1.13 && < 1.14, utf8-string
+  Build-depends:	mtl, haskell-src-exts >= 1.13 && < 1.16, utf8-string
   if flag(base4)
     Build-depends:      base >= 4 && < 5
     cpp-options:        -DBASE4
--- old/src/HSX/Transform.hs	2013-09-02 21:38:11.000000000 -0700
+++ new/src/HSX/Transform.hs	2013-09-02 22:20:18.438621624 -0700
@@ -348,7 +348,11 @@
     App e1 e2         -> transform2exp e1 e2 App
     NegApp e          -> fmap NegApp $ transformExpM e
     If e1 e2 e3       -> transform3exp e1 e2 e3 If
+#if MIN_VERSION_haskell_src_exts(1,14,0)
+    Tuple bx es       -> fmap (Tuple bx) $ mapM transformExpM es
+#else
     Tuple es          -> fmap Tuple $ mapM transformExpM es
+#endif
     List es           -> fmap List $ mapM transformExpM es
     Paren e           -> fmap Paren $ transformExpM e
     LeftSection e op  -> do e' <- transformExpM e
@@ -692,7 +696,11 @@
                                 (\p1 p2 -> PInfixApp p1 n p2)
                                 renameRP
     PApp n ps         -> renameNpat ps (PApp n) renameRP
+#if MIN_VERSION_haskell_src_exts(1,14,0)
+    PTuple bx ps      -> renameNpat ps (PTuple bx) renameRP
+#else
     PTuple ps         -> renameNpat ps PTuple renameRP
+#endif
     PList ps          -> renameNpat ps PList renameRP
     PParen p          -> rename1pat p PParen renameRP
     PRec n pfs        -> renameNpat pfs (PRec n) renameRPf
@@ -756,7 +764,11 @@
                                 (\p1 p2 -> PInfixApp p1 n p2)
                                 renameIrrP
     PApp n ps         -> renameNpat ps (PApp n) renameIrrP
+#if MIN_VERSION_haskell_src_exts(1,14,0)
+    PTuple bx ps      -> renameNpat ps (PTuple bx) renameIrrP
+#else
     PTuple ps         -> renameNpat ps PTuple renameIrrP
+#endif
     PList ps          -> renameNpat ps PList renameIrrP
     PParen p          -> rename1pat p PParen renameIrrP
     PRec n pfs        -> renameNpat pfs (PRec n) renameIrrPf
@@ -984,7 +996,11 @@
     PNeg q             -> tr1pat q PNeg (trPattern s)
     PInfixApp p1 op p2 -> tr2pat p1 p2 (\p1 p2 -> PInfixApp p1 op p2) (trPattern s)
     PApp n ps          -> trNpat ps (PApp n) (trPattern s)
+#if MIN_VERSION_haskell_src_exts(1,14,0)
+    PTuple bx ps       -> trNpat ps (PTuple bx) (trPattern s)
+#else
     PTuple ps          -> trNpat ps PTuple (trPattern s)
+#endif
     PList ps           -> trNpat ps PList (trPattern s)
     PParen p           -> tr1pat p PParen (trPattern s)
     PRec n pfs         -> trNpat pfs (PRec n) (trPatternField s)
@@ -992,7 +1008,9 @@
     PWildCard          -> return p
     PIrrPat p          -> tr1pat p PIrrPat (trPattern s)
     PatTypeSig s p t   -> tr1pat p (\p -> PatTypeSig s p t) (trPattern s)
+#if !MIN_VERSION_haskell_src_exts(1,15,0)
     PExplTypeArg _ _   -> return p
+#endif
     PQuasiQuote _ _    -> return p
     PBangPat p         -> tr1pat p PBangPat (trPattern s)
     PNPlusK _ _        -> return p
@@ -1481,7 +1499,11 @@
             PInfixApp p1 _ p2  -> gatherPVars p1 ++
                                          gatherPVars p2
             PApp _ ps          -> concatMap gatherPVars ps
+#if MIN_VERSION_haskell_src_exts(1,14,0)
+            PTuple _ ps        -> concatMap gatherPVars ps
+#else
             PTuple ps          -> concatMap gatherPVars ps
+#endif
             PList ps           -> concatMap gatherPVars ps
             PParen p           -> gatherPVars p
             PRec _ pfs         -> concatMap help pfs
--- old/src/Trhsx.hs	2013-09-02 22:31:15.000000000 -0700
+++ new/src/Trhsx.hs	2013-09-02 22:36:13.054635331 -0700
@@ -64,7 +64,11 @@
                  transform $ checkParse $ parse fp fc
 
 parse :: String -> String -> ParseResult Module
+#if MIN_VERSION_haskell_src_exts(1,14,0)
+parse fn fc = parseModuleWithMode (ParseMode fn Haskell2010 (map EnableExtension allExtensions) False True (Just baseFixities)) fcuc
+#else
 parse fn fc = parseModuleWithMode (ParseMode fn allExtensions False True (Just baseFixities)) fcuc
+#endif
   where fcuc= unlines $ filter (not . isPrefixOf "#") $ lines fc
 
 usageString :: String
