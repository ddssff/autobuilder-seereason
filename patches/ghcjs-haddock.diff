--- old/src/Compiler/JMacro/Base.hs	2014-05-30 17:19:55.000000000 -0700
+++ new/src/Compiler/JMacro/Base.hs	2014-05-30 17:35:47.724564505 -0700
@@ -177,7 +177,7 @@
       | LeOp            -- <=
       | AddOp           -- +
       | SubOp           -- -
-      | MulOp           -- *
+      | MulOp           -- "*"
       | DivOp           -- /
       | ModOp           -- %
       | LeftShiftOp     -- <<
--- old/src/Compiler/Variants.hs.orig	2014-05-30 16:58:44.000000000 -0700
+++ new/src/Compiler/Variants.hs	2014-05-30 18:06:24.000000000 -0700
@@ -26,13 +26,13 @@
                                -> ByteString
     , variantLink              :: DynFlags
                                -> GhcjsSettings
-                               -> FilePath                  -- ^ output directory
-                               -> [FilePath]                -- ^ include paths for home package
-                               -> [(PackageId, [FilePath])] -- ^ library dirs for dependencies
-                               -> [FilePath]                -- ^ object files
-                               -> [FilePath]                -- ^ extra JavaScript files
-                               -> (Gen2.Fun -> Bool)        -- ^ function to use as roots
-                               -> Set Gen2.Fun              -- ^ extra roots
+                               -> FilePath                  -- output directory
+                               -> [FilePath]                -- include paths for home package
+                               -> [(PackageId, [FilePath])] -- library dirs for dependencies
+                               -> [FilePath]                -- object files
+                               -> [FilePath]                -- extra JavaScript files
+                               -> (Gen2.Fun -> Bool)        -- function to use as roots
+                               -> Set Gen2.Fun              -- extra roots
                                -> IO ()
     }
 
--- old/src/Gen2/ClosureInfo.hs.orig	2014-05-30 17:39:06.000000000 -0700
+++ new/src/Gen2/ClosureInfo.hs	2014-05-30 17:53:52.000000000 -0700
@@ -323,8 +323,8 @@
       in  skip + (nregs `shiftL` 8)
 
 
-data StaticInfo = StaticInfo { siVar    :: !Text      -- | global object
-                             , siVal    :: !StaticVal -- | static initialization
+data StaticInfo = StaticInfo { siVar    :: !Text      -- ^ global object
+                             , siVal    :: !StaticVal -- ^ static initialization
                              }
   deriving (Eq, Ord, Show, Typeable)
 
@@ -351,7 +351,7 @@
                | DoubleLit !SaneDouble -- should we actually use double here?
                | StringLit !Text
                | BinLit    !ByteString
-               | LabelLit  !Bool !Text -- | is function pointer, label (also used for string / binary init)
+               | LabelLit  !Bool !Text -- ^ is function pointer, label (also used for string / binary init)
   deriving (Eq, Ord, Show, Typeable)
 
 instance ToJExpr StaticArg where
--- old/src/Gen2/Compactor.hs.orig	2014-05-30 17:39:06.000000000 -0700
+++ new/src/Gen2/Compactor.hs	2014-05-30 17:56:38.000000000 -0700
@@ -305,7 +305,7 @@
   | (CIFun arity regs0) <- typ = [1, arity, encodeRegs regs] ++ ls
   | (CICon tag)         <- typ = [2, tag] ++ ls
   | CIStackFrame        <- typ = [3, encodeRegs regs] ++ ls
--- | (CIPap ar)         <- typ = [4, ar] ++ ls  -- these should only appear during runtime
+-- (CIPap ar)         <- typ = [4, ar] ++ ls  -- these should only appear during runtime
   | otherwise                  = error ("encodeInfo, unexpected closure type: " ++ show typ)
   where
     ls         = encodeLayout layout ++ encodeSrt static
--- old/src/Gen2/Generator.hs.orig	2014-05-30 17:39:06.000000000 -0700
+++ new/src/Gen2/Generator.hs	2014-05-30 18:02:48.000000000 -0700
@@ -1178,9 +1178,9 @@
 
 
 -- find a specialized application path if there is one
-selectApply :: Bool     ->    -- ^ true for fast apply, false for stack apply
-               ([StgArg], [JExpr]) ->    -- ^ arguments
-               G (JExpr,Bool) -- ^ the function to call, true if specialized path
+selectApply :: Bool           -- ^ true for fast apply, false for stack apply
+            -> ([StgArg], [JExpr])       -- ^ arguments
+            -> G (JExpr,Bool) -- ^ the function to call, true if specialized path
 selectApply fast (args, as) = do
   case specApply fast (length args) (length as) of
     Just e  -> return (e, True)
--- old/src/Gen2/DynamicLinking.hs	2014-06-25 13:08:42.714267980 -0700
+++ new/src/Gen2/DynamicLinking.hs	2014-06-25 13:29:56.086303548 -0700
@@ -342,9 +342,11 @@
     -- by the RTS.  We can't therefore use the ordinary way opts for these.
     let
         debug_opts | WayDebug `elem` ways dflags = [
--- #if defined(HAVE_LIBBFD)
---                        "-lbfd", "-liberty"
--- #endif
+{-
+#if defined(HAVE_LIBBFD)
+                          "-lbfd", "-liberty"
+#endif
+-}
                          ]
                    | otherwise            = []
 
--- old/src/Gen2/Linker.hs	2014-05-30 16:58:44.000000000 -0700
+++ new/src/Gen2/Linker.hs	2014-05-30 18:10:45.000000000 -0700
@@ -67,7 +67,7 @@
 import           Gen2.RtsTypes
 import           Gen2.Shim
 
-type LinkableUnit = (Package, Module, Int) -- | module and the index of the block in the object file
+type LinkableUnit = (Package, Module, Int) -- ^ module and the index of the block in the object file
 type Module       = Text
 
 -- number of bytes linked per module
