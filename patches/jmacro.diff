diff -ru jmacro-0.6.14/jmacro.cabal /tmp/jmacro-0.6.14/jmacro.cabal
--- jmacro-0.6.14/jmacro.cabal	2017-09-12 06:50:11.371932533 -0700
+++ /tmp/jmacro-0.6.14/jmacro.cabal	2018-04-20 16:37:37.497082634 -0700
@@ -12,7 +12,7 @@
 Cabal-Version:       >= 1.6
 
 library
-  build-depends:     base >= 4, base < 5, containers, wl-pprint-text, text, safe >= 0.2, parsec > 3.0, template-haskell >= 2.3, mtl > 1.1 , haskell-src-exts, haskell-src-meta, bytestring >= 0.9, syb, aeson >= 0.5 , regex-posix > 0.9, vector >= 0.8, unordered-containers >= 0.2
+  build-depends:     base >= 4, base < 5, containers, wl-pprint-text, text, safe >= 0.2, parsec > 3.0, template-haskell >= 2.3, mtl > 1.1 , haskell-src-exts, haskell-src-meta, bytestring >= 0.9, syb, aeson >= 0.5 , regex-base, regex-tdfa, regex-compat-tdfa, vector >= 0.8, unordered-containers >= 0.2
 
   exposed-modules:   Language.Javascript.JMacro
                      Language.Javascript.JMacro.Util
@@ -29,7 +29,7 @@
   default: False
 
 executable jmacro
-  build-depends:     base >= 4, base < 5, containers, wl-pprint-text, text, safe >= 0.2, parsec > 3.0, template-haskell >= 2.3, mtl > 1.1 , haskell-src-exts, haskell-src-meta, bytestring >= 0.9, syb, aeson >= 0.5 , regex-posix > 0.9, vector >= 0.8, unordered-containers >= 0.2, parseargs
+  build-depends:     base >= 4, base < 5, containers, wl-pprint-text, text, safe >= 0.2, parsec > 3.0, template-haskell >= 2.3, mtl > 1.1 , haskell-src-exts, haskell-src-meta, bytestring >= 0.9, syb, aeson >= 0.5 , regex-base, regex-tdfa, regex-compat-tdfa, vector >= 0.8, unordered-containers >= 0.2, parseargs
   main-is: Language/Javascript/JMacro/Executable.hs
 
 executable jmacro-bench
diff -ru old/Language/Javascript/JMacro/QQ.hs new/Language/Javascript/JMacro/QQ.hs
--- old/Language/Javascript/JMacro/QQ.hs	2017-09-12 06:50:11.371932533 -0700
+++ new/Language/Javascript/JMacro/QQ.hs	2018-04-20 16:47:55.945204812 -0700
@@ -36,7 +36,8 @@
 import qualified Text.ParserCombinators.Parsec.Token as P
 import Text.ParserCombinators.Parsec.Language(javaStyle)
 
-import Text.Regex.Posix.String
+import Text.Regex.Base
+import Text.Regex.TDFA.String
 
 import Language.Javascript.JMacro.Base
 import Language.Javascript.JMacro.Types
@@ -590,10 +591,10 @@
 --args :: JMParser [JExpr]
 --args = parens $ commaSep expr
 
-compileRegex :: String -> Either WrapError Regex
-compileRegex s = unsafePerformIO $ compile co eo s
-    where co = compExtended
-          eo = execBlank
+compileRegex :: String -> Either String Regex
+compileRegex s = compile co eo s
+    where co = defaultCompOpt
+          eo = defaultExecOpt
 
 expr :: JMParser JExpr
 expr = do
