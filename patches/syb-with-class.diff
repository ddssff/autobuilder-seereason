--- old/syb-with-class.cabal	2014-02-18 14:42:19.000000000 -0800
+++ new/syb-with-class.cabal	2014-02-18 17:05:26.200945088 -0800
@@ -25,7 +25,7 @@
   location: http://patch-tag.com/r/Saizan/syb-with-class/
 
 Library 
-    Build-Depends:      base >= 3 && < 5, template-haskell >= 2.4 && < 2.9, bytestring, array, containers
+    Build-Depends:      base >= 3 && < 5, template-haskell >= 2.4, bytestring, array, containers
     Exposed-modules:
         Data.Generics.SYB.WithClass.Basics
         Data.Generics.SYB.WithClass.Context
--- old/Data/Generics/SYB/WithClass/Basics.hs	2014-02-18 21:20:51.000000000 -0800
+++ new/Data/Generics/SYB/WithClass/Basics.hs	2014-02-19 05:05:29.441965852 -0800
@@ -12,13 +12,21 @@
 
 module Data.Generics.SYB.WithClass.Basics (
 
+#if MIN_VERSION_base(4,7,0)
+ module Data.OldTypeable,
+#else
  module Data.Typeable,
+#endif
  module Data.Generics.SYB.WithClass.Context,
  module Data.Generics.SYB.WithClass.Basics
 
 ) where
 
+#if MIN_VERSION_base(4,7,0)
+import Data.OldTypeable
+#else
 import Data.Typeable
+#endif
 import Data.Generics.SYB.WithClass.Context
 
 #ifdef __HADDOCK__
--- old/Data/Generics/SYB/WithClass/Instances.hs.orig	2014-02-19 06:26:16.000000000 -0800
+++ new/Data/Generics/SYB/WithClass/Instances.hs	2014-02-19 09:19:35.258326066 -0800
@@ -364,7 +364,11 @@
 eitherDataType :: DataType
 eitherDataType = mkDataType "Prelude.Either" [leftConstr,rightConstr]
 
+#if MIN_VERSION_base(4,7,0)
+instance (Typeable2 Either, Sat (ctx (Either a b)), Data ctx a, Data ctx b) =>
+#else
 instance (Sat (ctx (Either a b)), Data ctx a, Data ctx b) =>
+#endif
           Data ctx (Either a b) where
   gfoldl _ f z (Left a)   = z Left  `f` a
   gfoldl _ f z (Right a)  = z Right `f` a
@@ -523,7 +527,11 @@
          Data ctx TypeRep where
   toConstr _ _   = error "toConstr"
   gunfold _ _ _  = error "gunfold TypeRep"
+#if MIN_VERSION_base(4,7,0)
+  dataTypeOf _ _ = mkNorepType "Data.OldTypeable.TypeRep"
+#else
   dataTypeOf _ _ = mkNorepType "Data.Typeable.TypeRep"
+#endif
 
 
 ------------------------------------------------------------------------------
@@ -533,7 +541,11 @@
          Data ctx TyCon where
   toConstr _ _   = error "toConstr"
   gunfold _ _ _  = error "gunfold TyCon"
+#if MIN_VERSION_base(4,7,0)
+  dataTypeOf _ _ = mkNorepType "Data.OldTypeable.TyCon"
+#else
   dataTypeOf _ _ = mkNorepType "Data.Typeable.TyCon"
+#endif
 
 
 ------------------------------------------------------------------------------
@@ -564,7 +576,12 @@
 ------------------------------------------------------------------------------
 
 
+#if MIN_VERSION_base(4,7,0)
+instance (Typeable1 ForeignPtr, Typeable Handle,
+          Sat (ctx Handle)) =>
+#else
 instance Sat (ctx Handle) =>
+#endif
          Data ctx Handle where
   toConstr _ _   = error "toConstr"
   gunfold _ _ _  = error "gunfold Handle"
@@ -604,7 +621,12 @@
 ------------------------------------------------------------------------------
 
 
+#if MIN_VERSION_base(4,7,0)
+instance (Typeable1 ForeignPtr,
+          Sat (ctx (ForeignPtr a)), Typeable a) =>
+#else
 instance (Sat (ctx (ForeignPtr a)), Typeable a) =>
+#endif
           Data ctx (ForeignPtr a) where
   toConstr _ _   = error "toConstr"
   gunfold _ _ _  = error "gunfold ForeignPtr"
@@ -683,7 +705,12 @@
 mapDataType :: DataType
 mapDataType = mkDataType "Data.Map.Map" [emptyMapConstr,insertMapConstr]
 
+#if MIN_VERSION_base(4,7,0)
+instance (Typeable2 M.Map,
+          Sat (ctx (M.Map a b)), Data ctx a, Data ctx b, Ord a) =>
+#else
 instance (Sat (ctx (M.Map a b)), Data ctx a, Data ctx b, Ord a) =>
+#endif
           Data ctx (M.Map a b) where
   gfoldl _ f z m = case M.minViewWithKey m of
                      Nothing -> z M.empty
@@ -707,7 +734,12 @@
 setDataType :: DataType
 setDataType = mkDataType "Data.Set.Set" [emptySetConstr,insertSetConstr]
 
+#if MIN_VERSION_base(4,7,0)
+instance (Typeable1 S.Set,
+          Sat (ctx (S.Set a)), Data ctx a, Ord a) =>
+#else
 instance (Sat (ctx (S.Set a)), Data ctx a, Ord a) =>
+#endif
           Data ctx (S.Set a ) where
   gfoldl _ f z s = case S.minView s of
                      Nothing -> z S.empty
@@ -723,5 +755,10 @@
 
 ------------------------------------------------------------------------------
 
+#if MIN_VERSION_base(4,7,0)
+instance Typeable ByteString
+instance Typeable L.ByteString
+#endif
+
 $( deriveData [''ByteString] )
 $( deriveData [''L.ByteString] )
